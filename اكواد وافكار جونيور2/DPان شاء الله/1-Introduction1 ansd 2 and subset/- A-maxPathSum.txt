
// Let's move to some other examples! Remember:

// Given grid of positive numbers, Start from 0, 0 and end at n, n. Move only to right and down - find path with sum of numbers is maximum.

/*
15
24
512
678
149
What paths there" 51289, 51789, 51749, 56789, 56749, 56149 ..
				  It is like: 5 { 1 {289, 789, 749}, 6{789, 749, 149} }
				  In other words, 5 needs answer of 1 and of 6 to maximize over them.
*/
int grid[MAX][MAX];

// Think in function F(i, j) that find solution from (i, j) to (n, n)

int maxPathSum(int r, int c)
{
	if( !valid(r, c))
		return 0;

	if (r == n-1 && c == n-1)
		return grid[r][c];	// base

	int path1 = maxPathSum(r, c+1);	// right
	int path2 = maxPathSum(r+1, c);	// down

	return grid[r][c] + max(path1, path2);
}


















// How to trun code to memization?
// 1- Create array of input dimensions, and output of its return.
// E.g. int mem[MAX][MAX];
// Initialize it with a value that will never be a correct answer, e.g. -1
// If value is -1, then it is not visited before. Else, use saved value

int mem[MAX][MAX];	// R & C is in range N. Function return int
int maxPathSum_save(int r, int c)
{
	//1- Always hanle invalid calls first
	if( !valid(r, c))
		return 0;

	//2- Handle Base cases
	if (r == n-1 && c == n-1)
		return grid[r][c];	// base

	//3- check if visited before

	if(mem[r][c] != -1)
		return mem[r][c];

	int path1 = maxPathSum_save(r, c+1);	// right
	int path2 = maxPathSum_save(r+1, c);	// down

	return mem[r][c] = grid[r][c] + max(path1, path2);
}
