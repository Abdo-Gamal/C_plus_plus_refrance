 int n;

//vector<vector<int>>v(n+1, vector<int>(4));
int v[(int)(1e5 + 1)][4];
int Mem[(int)(1e5 + 1)][4] = { -1 };
int Solve(int i, int last) {

    if (i == n)
        return 0;
    int& ret = Mem[i][last];
    if (ret != -1)
        return ret;

    int mx=-1;
    if (last != 0) {
        int x = Solve(i + 1, 0)+v[i][0];
        mx = max(mx, x);
    }
    if (last != 1) {
       int x = Solve(i + 1, 1) + v[i][1];
       mx = max(mx, x);
    }
    if (last != 2) {
        int x = Solve(i + 1, 2) + v[i][2];
        mx = max(mx, x);
    }
    return ret=mx;

}

/**------------------------->>  Main  <<------------------------**/

int main() {
    Fast();

   cout<< Solve(0, 3)<<"\n";
}

===================================================================================or impor



int n,k;
vector<vector<int>>v;
int res[100002][4];
int solve(int idx = 0,int current =0) {
	if (idx == n+1)return 0;
	if (~res[idx][current])return res[idx][current];
	int mx = 0;
	for (int i = 1; i <= 3; i++) {
		if (i == current)skip;
		mx = max(v[idx][i] + solve(idx + 1, i),mx);
	}
	return res[idx][current] = mx;
}
//</FUNCTIONS>		
int main() {
	Fast();
	cin >> n;
	v = vector<vector<int>>(n+1, vector<int>(4));
	for (int i = 0; i <= n; i++)
		for(int j=0;j<=3;j++)
			res[i][j] = -1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= 3; j++)
			cin >> v[i][j];
	}
	cout << solve() << endl;
}