
int n;
vector<int>x, h;
map<pair<int, ll>, int>Mem;
int Solve(int i,ll prev)	
{
    if (i == n-1)
        return 1;

    if (Mem.find({ i,prev }) != Mem.end())return Mem[{i, prev}];
    int& ret = Mem[{i, prev}];

    int a=0, b=0, c=0;

    if( prev<(x[i]-h[i]))
       a=Solve(i+1, x[i])+1;

    if ((x[i] + h[i])<x[i+1])
        b=Solve(i + 1, x[i] + h[i]) + 1;

      c= Solve(i + 1, x[i]) ;

      return ret=max({ a,b,c });
}


/**------------------------->>  Main  <<------------------------**/

int main() {
    Fast();
    cin >> n;
    x = h = vector<int>(n +3);
    for (int i = 0; i <n; i++) {
        cin >> x[i] >> h[i];
    }
   
    if(n==1)
        cout << 1;

    else cout << Solve(1,x[0])+1;
}
