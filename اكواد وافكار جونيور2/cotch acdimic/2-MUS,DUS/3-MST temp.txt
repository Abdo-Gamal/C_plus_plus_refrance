#define cost first 
#define from second.first
#define   to   second.second
vector<int> par, sz;
vector <pair<int, pair<int,int>>>edges;

int findParent(int u) {   //averge O(1) // find parent for node  and update parent  
    if (u == par[u])return u;
   return par[u]=findParent(par[u]);
}

void join(int a,int b) {   //averge O(1)
     a=findParent(a);
     b= findParent(b);
     if (a != b) {
         if(sz[a] > sz[b])  // all time sz of a small than sz of b
             swap(a, b);
         par[a] = b;         // put set(a) under the sz(b)
         sz[b] += sz[a];
     }
}
ll  kruskal() {
    ll ret = 0;
    sort(all(edges)); //sort edges  by  wight
    iota(all(par), 0); // == for(int i=0;i<n;i++)par[i]=i;

    for (auto e : edges) {
        int u = e.from;
        int v = e.to;
        int c = e.cost;
        if (findParent(u) != findParent(v)) {
            ret += c;
            join(u, v);
        }
    }
    return ret;
}
int main() {

        Fast();
            int n, m;
            cin >> n >> m;
            par=vector<int>(n);
            sz = vector<int>(n, 1);// itial ever node is alone 
            for (int i = 0; i < m;i++) 
            {
                int u, v,w; cin >> u >> v>>w;
                u--, v--;
                edges.push_back({ w ,{u,v} });  //my edges
            }
            cout << kruskal();

}