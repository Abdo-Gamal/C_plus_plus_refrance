
/**------------------------->>  Main  <<------------------------**/

vector<int> par, nxt, ed;//par = start

int findParent(int u) {   //averge O(1) // find parent for node  and update parent  
    if (u == par[u])return u;
    return par[u] = findParent(par[u]);
}

void join(int a, int b) {   //averge O(1)
    a = findParent(a);
    b = findParent(b);
    if (a != b) {
        par[b] = a;     // put set(a) under the sz(b)
        nxt[ed[a]] = b;
        ed[a] = ed[b];

    }
}



int main() {

    Fast();
    int  n; cin >> n;
    par = nxt = ed = vector<int>(n);
    iota(all(par), 0);
    iota(all(ed), 0);

    for (int i = 0; i < n - 1; i++) {
        int u, v; cin >> u >> v;
        join(--u, --v);
    }
    int st = findParent(0);
    for (int i = 0; i < n; i++) {
        cout << st +1<<" ";
        st = nxt[st];
    }
}