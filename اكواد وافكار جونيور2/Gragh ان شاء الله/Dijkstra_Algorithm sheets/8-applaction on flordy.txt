

void TransitiveClosure()
{
	// assume matrix is 0 for disconnect, 1 is connect
	// we only care if a path exist or not, not a shortest path value

	lp(k, n) lp(i, n) lp(j, n)
		adj[i][j] |= (adj[i][k] & adj[k][j]);
}
=======================================================================================
void minimax()
{
	// find path such that max value on road is minimum

	lp(k, n) lp(i, n) lp(j, n)
		adj[i][j] = min(adj[i][j], max(adj[i][k], adj[k][j]) );
}
=======================================================================================
void maximin()
{
	// find path such that min value on road is maximum

	lp(k, n) lp(i, n) lp(j, n)
		adj[i][j] = max(adj[i][j], min(adj[i][k], adj[k][j]) );
}
=======================================================================================
void longestPathDAG()
{
	lp(k, n) lp(i, n) lp(j, n)
		adj[i][j] = max(adj[i][j], max(adj[i][k], adj[k][j]) );
}
=======================================================================================



void countPaths()
{
	lp(k, n) lp(i, n) lp(j, n) 	// Floyd warshal for counting #of paths
		adj[i][j] += adj[i][k] * adj[k][j];

	// 1- assume graph is DAG
	/*
	 * k = 5, i = 1, j = 2 we will use adj[ 1 ][ 5 ] with old value
	 * k = 5, i = 1, j = 5 we will update adj[ 1 ] [ 5 ]
	 * k = 5, i = 1, j = 7 we will use adj[ 1 ][ 5 ] with new value
	 * Won't this give and incorrect result?
	 *
	 * NO. E.g. when k = 5, i = 1, j = 5:
	 * adj[1][5] += adj[1][5] * adj[5][5];
	 * adj[5][5] = 0, so no update happens. In general, when k = i or j, no updates happens, so in-placement update is fine.
	 */

	/*
	 * What if graph is not DAG.
	 * if(adj[i][i] > 0)	-> i has a cycle path on it
	 *
	 * Generally, for any node v that has a cycle,
	 * 		if i reaches v, and v reaches j, then count of (i, j) is useless as count is OO. Remain adj[][] is valid
	 */

}



=======================================================================================




/*
 * . If you had a cycle in a graph, the longest path wouldn't be
well defined, because you could keep going round and round the cycle
making the path longer.
 */

bool isNegativeCycle() {
	lp(i, n)
		if(adj[i][i] < 0)
			return true;	// then node i got to i with overall cost < 0.

	return false;
}
=======================================================================================
bool anyEffectiveCycle(int src, int dest)
{
	lp(i, n)
		if(adj[i][i] < 0 && adj[src][i] < OO && adj[i][dest] < OO)
			return true;

	return false;	// there is a finite path although cycles if any
}


=======================================================================================


/*
 * Graph negative:
 * 	Shortest <-> Longest
 * 	Postive Cycle <-> Negative Cycle
 * 	Minimax <-> Maximin
 */

int graphDiameter()
{	// Longest path among all shortest ones

	floyd2();

	int mx = 0;
	lp(i, n) lp(j, n) if(adj[i][j] < OO)
		mx = max(mx, adj[i][j]);

	return mx;
}

=======================================================================================
vector< vector<int> > SCC()
{
	vector<int> comp(n, -1);

	int cnt = 0;
	lp(i, n) if(comp[i]==-1) {
		comp[i] = cnt++;
		lp(j, n) if(adj[i][j] < OO && adj[j][i] < OO)	// transitive clusre is enough
			comp[j] = comp[i];
	}

	vector< vector<int> > compGraph(cnt, vector<int>(cnt));

	lp(i, n) lp(j, n)	if(adj[i][j] < OO)
		compGraph[ comp[i] ][ comp[j] ] = 1;	// DAG

	return compGraph;
}


=======================================================================================