
O(number of edge +number of node)=O(e)
==============================================================================================
int n, e;
vector< vector<int> > adj;
vector<bool> visited;

void dfs(int node)
{
	visited[node] = true;

	    for (int i = 0; i < adj[node].size();i++)                           // rep from 0 to size().
	{
             int child = adj[node][i];
		if (!visited[child])	// To avoid cyclic behavior
			dfs(child);
	}


	//topsort.push_back(node);	// DAG // Other way Indegree / Outdegree   
}
==============================================================================================
//in main

   cin>>n>>e;

	adj = vector< vector<int> >(n);
	visited = vector<bool>(n);

	lp(i, e) {
		int from, to;
		cin>>from>>to;
		adj[from-1].push_back(to-1);
 	}

==============================================================================================
//topsort.push_back(node);	// DAG  " Dirctit acycle graph "  // Other way Indegree / Outdegree   
//شرح السطر دة  
دة  شعان احط النقطة الى خلصت عندى  فى فكتور    
ودة هيفدينى  فى معرفة  ترتيب الكورسات مثلا 
مين بيعتمد على مين    
زى  رياضة  تلاتة بتعتمد على رياضة  اتنين   وهكذا 
// فى السطر دة لما  حيحزن عندى النقطة الى مش بتعتمد على حاجة فى الول  ثم النقط الى بتعتمد على حجات بس الحجات دى انا خزنتها عندى اختها يعنى 
// DAG  for  directed acycle gragh

