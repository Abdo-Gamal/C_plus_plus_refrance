
-----------------------------------------------------------------------------------------
s.substr(start,number of char);
-----------------------------------------------------------------------------------------
	long long sum = accumulate(a.begin(), a.end(), 0ll);

-----------------------------------------------------------------------------------------هنستخدام الدوال على الحجات دى
	int a[5] = { 5, 2, 1, 3, 1 };
	vector<int>v(5);
	v = { 5, 2, 1, 3, 1 };
	string x = "bcdea";
-----------------------------------------------------------------------------------------

sort array

	// array , vector , string
	// sort ,reverse 
	sort(a, a + 5); // sort ( name , name + size )
	sort(a + 3, a + 5); // sort in range [3 , 5)
	reverse(a, a + 5);  // sort in range [3 , 5) تاكد
-----------------------------------------------------------------------------------------sort for  string and vector work with  itoraters

	sort(v.begin(), v.end()); // sort  ( name.begin(),name.end())
	sort(v.begin() + 3, v.begin() + 5); // sort in range [3,5)
	reverse(v.begin(), v.end());

	sort(x.begin(), x.end());
	reverse(x.begin(), x.end());
-----------------------------------------------------------------------------------------
////////////////////////////////////////هام
          //Count , binary_search , Lower_bound ,Upper_bound

	
	int  c = count(a, a + 5, 10); // count( name , name + size , value )
       //  لازم تكون الارى مترتبة  السورت
	int f  = binary_search(a,a+5,10); // same  // return true or false 

	
------------------------------------------------------------------------------------------------
 // get index of first value equal or greater than value given
	// array must be sorted 
	sort(a, a + 5);
	sort(v.begin(), v.end()); 
//Time Complexity : 
//The number of comparisons performed is logarithmic in the distance between first and last. i.e,
// (at most log2(last – first) + O(1) comparisons)


                                                             // 1 2 3 4 4
//  بترجع  الاندكس   الرقم   الى ببحث عنة ولو مش موجود بترجع اندكس   الى( اكبر) منة يعنى انا عرفت الرقم موجود ولا لا من البينرى سيرش  وهجيب الاندكس ناو
// لو الرقم مفيش اكبر منة (اخر حاجة هو)  ومفيش بيسوية   جم الفكتور
//لو  فى تكرار للرقم الى ببحث عنة هيرحع اول تكرار يقابلة 
// هو انا بطرح البداية عشان  هو بيرجعلى id   or iterator 
// id like     1d031ox
//والبداية   like 1d030ox    
//  لما تطرحم هيرجع الاندكس      
       int idx1 =  lower_bound(a, a + 5, 5) - a;  // for array 
	int idx2 = lower_bound(v.begin(),v.end(), 2) - v.begin();
============================
// دة  بيبحث عن الى اكبر من الرقم حتى لو الى بيسوية  موجود وبيرجع الانكس   
//  طيب لو مفيش اكبر منة هيرجع حجم الفكتور
//   لو فى تكرار للحجاجة الى هيرجع اندكس ليها هيرجع  اول واحد يقابلة 
        int idx3 = upper_bound(a, a + 5, 2) - a;
	int idx4 = upper_bound(v.begin(),v.end(), 2) - v.begin();
// انت كدة لو استخدامت اللور اند بوند  عشان  تجيب  اندكس رقم  واستخدمت الابر اند بوند  عشان تجيب اندكس نفس  الرقم  كدة انت جبت بداية التكرار بتاعة ونهايت التكارر بتاعة +1 
//*upper_bound(a, a + 5, 2)     كدة لو عاوز القيمة الى فى المكان 


------------------------------------------------------------------------------------------------
    // fill , max_element ,  remove , Is_sorted(c++11),find 

	
	/*fill(a, a + 5, 10);
	fill(v.begin(), v.end(), 5);*/
//memset اسرع 
-----------------------------------------------------------------------------------------
	int mx = *max_element(a, a + 5);   بترجع pointer بيشاور على  المكان 
	for (int i = 0; i < 5; i++)
		cout << a[i] << " ";
	cout << endl; // 1 2 3 4 5
-----------------------------------------------------------------------------------------
	remove(a, a + 5, 2); // it not remove actually it replace with last elemnt and decrese size
	remove(v.begin(), v.end(), 5); // remove (all) values 5 from vector or array
-----------------------------------------------------------------------------------------

	bool ok = is_sorted(a, a + 5);  لاحظ لو  فى  تكارر فى الارقام 
-----------------------------------------------------------------------------------------
	//next_permutation
	cout << endl;
	x = "abc"; // o(n!)
	do{
		cout << x << endl;
	} while (next_permutation( x.begin() , x.end() ));
-----------------------------------------------------------------------------------------
prev_permutation(all(ss));
-----------------------------------------------------------------------------------------
			auto indx = find(v.begin(), v.end(), value)-v.begin();
--------------------------------------------------------

