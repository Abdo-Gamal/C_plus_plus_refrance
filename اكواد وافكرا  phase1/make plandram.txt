string getPalindrome(string str) { 
  
  // Store counts of characters 
  unordered_map<char, int> hmap; 
  for (int i = 0; i < str.length(); i++) 
    hmap[str[i]]++; 
  
  /* find the number of odd elements. 
     Takes O(n) */
  int oddCount = 0; 
  char oddChar; 
  for (auto x : hmap) { 
    if (x.second % 2 != 0) { 
      oddCount++; 
      oddChar = x.first; 
    } 
  } 
  
  /* odd_cnt = 1 only if the length of  
     str is odd */
  if (oddCount > 1 || oddCount == 1 &&  
                  str.length() % 2 == 0) 
    return "NO PALINDROME"; 
  
  /* Generate first halh of palindrome */
  string firstHalf = "", secondHalf = ""; 
  for (auto x : hmap) { 
     
    // Build a string of floor(count/2) 
    // occurrences of current character 
    string s(x.second / 2, x.first);   //(عدد الروف الى عوزها تكون موجودة , char);
  
    // Attach the built string to end of 
    // and begin of second half 
    firstHalf = firstHalf + s; 
    secondHalf = s + secondHalf; 
  } 
  
  // Insert odd character if there  
  // is any 
  return (oddCount == 1) ?  
         (firstHalf + oddChar + secondHalf) : 
         (firstHalf + secondHalf); 
} 


==========================================================================================














===============================================================================or:   
مش شغال  الى جا ى    باين    جرب  دخل حرف واحد 
===================




string make(int frqA[], int n) {

	char odd_char;
	for (int i = 0; i < 26; i++) {
		if (frqA[i] % 2 != 0) {
			frqA[i]--;
			odd_char = (char) (i + 'a');
			break;
		}
	}
	char *res = new char[n];
	int front_index = 0, rear_index = n - 1;
	for (int i = 0; i < 26; i++) {
		if (frqA[i] != 0) {
			char ch = (char) (i + 'a');
			for (int j = 0; j < frqA[i] / 2; j++) {
				res[front_index++] = ch;
				res[rear_index--] = ch;
			}
		}
	}
	if (front_index == rear_index)
		res[front_index] = odd_char;
	cout << res << "\n";
	return res;
}
