Intermediate Over Flow, but output fit
	a) Sometimes, the intermediate overflow is your code fault
		E.g. Your fraction class sum 2 fractions by multiplying their denominator while should utilize LCM of them

			1/12 + 1/8 = (8 + 12) / (12 * 8)

			Correct	   =   / LCM(8, 12)
          ex*  1/6+1/4 =2/12 + 3/12         lcm  يعتبر وحت المقام على ال 
شرح المثال     
  البسط -->lcm(3,4)=12
  المقام  
     2/12  -->2  from a*(lcm(a,b)/b) then 1*(lcm(4,6)/6)-->1*(12/6)=2
     3/12  -->3  from a*(lcm(a,b)/b) then 1*(lcm(4,6)/4)-->1*(12/4)=3


	b) Sometimes, it is mandatory. Here is a trick if operations are +, -, * ONLY

		Assume that F(...) has maximum output X, select an integer Y > X
		and calc F()%Y which will be result


	 	What if X e.g. fits in 32 bit, then Y will be more than 32 bit and most probably overflow occurs!

	 	Here is a better trick

		Find set of small prime numbers p1, p2, p3 .. such that their multiplication > X
			E.g. 257, 263, 269, 271 -> 4 primes their multiplication > 2^32

		Find F() % pi

		Now we have 4 primes, and 4 Mode results...How to combine them to get F() % (p1 * p2 ....)?
		 	 Chinese remainder theorem

////////////////////////////////////////////////////////(*)//////////////////////////////////////////////Chinese remainder theorem////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////
////////////////
///////
///

// A C++ program to demonstrate working of Chinise remainder 
// Theorem 
#include<bits/stdc++.h> 
using namespace std; 
  
// Returns modulo inverse of a with respect to m using extended 
// Euclid Algorithm. Refer below post for details: 
// https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/ 
int inv(int a, int m) 
{ 
    int m0 = m, t, q; 
    int x0 = 0, x1 = 1; 
  
    if (m == 1) 
       return 0; 
  
    // Apply extended Euclid Algorithm 
    while (a > 1) 
    { 
        // q is quotient 
        q = a / m; 
  
        t = m; 
  
        // m is remainder now, process same as 
        // euclid's algo 
        m = a % m, a = t; 
  
        t = x0; 
  
        x0 = x1 - q * x0; 
  
        x1 = t; 
    } 
  
    // Make x1 positive 
    if (x1 < 0) 
       x1 += m0; 
  
    return x1; 
} 
  
// k is size of num[] and rem[].  Returns the smallest 
// number x such that: 
//  x % num[0] = rem[0], 
//  x % num[1] = rem[1], 
//  .................. 
//  x % num[k-2] = rem[k-1] 
// Assumption: Numbers in num[] are pairwise coprime 
// (gcd for every pair is 1) 
int findMinX(int num[], int rem[], int k) 
{ 
    // Compute product of all numbers 
    int prod = 1; 
    for (int i = 0; i < k; i++) 
        prod *= num[i]; 
  
    // Initialize result 
    int result = 0; 
  
    // Apply above formula 
    for (int i = 0; i < k; i++) 
    { 
        int pp = prod / num[i]; 
        result += rem[i] * inv(pp, num[i]) * pp; 
    } 
  
    return result % prod; 
} 
  
// Driver method 
int main(void) 
{ 
    int num[] = {3, 4, 5}; 
    int rem[] = {2, 3, 1}; 
    int k = sizeof(num)/sizeof(num[0]); 
    cout << "x is " << findMinX(num, rem, k); 
    return 0; 
} 
Java
filter_none
edit
play_arrow

brightness_4
// A Java program to demonstrate  
// working of Chinise remainder  
// Theorem 
import java.io.*; 
  
class GFG { 
      
    // Returns modulo inverse of a  
    // with respect to m using extended 
    // Euclid Algorithm. Refer below post for details: 
    // https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/ 
    static int inv(int a, int m) 
    { 
        int m0 = m, t, q; 
        int x0 = 0, x1 = 1; 
      
        if (m == 1) 
        return 0; 
      
        // Apply extended Euclid Algorithm 
        while (a > 1) 
        { 
            // q is quotient 
            q = a / m; 
      
            t = m; 
      
            // m is remainder now, process 
            // same as euclid's algo 
            m = a % m;a = t; 
      
            t = x0; 
      
            x0 = x1 - q * x0; 
      
            x1 = t; 
        } 
      
        // Make x1 positive 
        if (x1 < 0) 
        x1 += m0; 
      
        return x1; 
    } 
      
    // k is size of num[] and rem[]. 
    // Returns the smallest number 
    // x such that: 
    // x % num[0] = rem[0], 
    // x % num[1] = rem[1], 
    // .................. 
    // x % num[k-2] = rem[k-1] 
    // Assumption: Numbers in num[] are pairwise  
    // coprime (gcd for every pair is 1) 
    static int findMinX(int num[], int rem[], int k) 
    { 
        // Compute product of all numbers 
        int prod = 1; 
        for (int i = 0; i < k; i++) 
            prod *= num[i]; 
      
        // Initialize result 
        int result = 0; 
      
        // Apply above formula 
        for (int i = 0; i < k; i++) 
        { 
            int pp = prod / num[i]; 
            result += rem[i] * inv(pp, num[i]) * pp; 
        } 
      
        return result % prod; 
    } 
      
    // Driver method 
    public static void main(String args[]) 
    { 
        int num[] = {3, 4, 5}; 
        int rem[] = {2, 3, 1}; 
        int k = num.length; 
        System.out.println("x is " +findMinX(num, rem, k)); 
    } 
} 
  
// This code is contributed by nikita Tiwari.