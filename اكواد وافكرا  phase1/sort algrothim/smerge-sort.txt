=================================================================================================================================
صح
=================================================================================================================================
int arr[(int) (1e6) + 4], temp[(int) (1e6) + 5];
void merge(int left, int mid, int right) {

	int i = left;
	int j = mid;
	int k = left;
	while ((i <= mid - 1) && (j <= right)) {
		if (arr[i] <= arr[j])
			temp[k++] = arr[i++];
		else {
			temp[k++] = arr[j++];
		}
	}
	while (i <= mid - 1)
		temp[k++] = arr[i++];
	while (j <= right)
		temp[k++] = arr[j++];

	for (i = left; i <= right; i++)
		arr[i] = temp[i];

}
void mergeSort(int left, int right) {

	if (right > left) {
		int mid = (right + left) / 2;
		mergeSort(left, mid);
		mergeSort(mid + 1, right);

		merge(left, mid + 1, right);
	}

}
=================================================================================================================================
صح يرضو
=================================================================================================================================
void merge(int arr[], int l, int m, int r) {
    int i, j, k = l;
    int n1 = m - l + 1;
    int n2 = r - m;
 
    int L[n1], R[n2];
 
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
 
        int m = l + (r - l) / 2;
 
        // Sort first and second halves 
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
 
        merge(arr, l, m, r);
    }
}